[general]
## python:      Absolute path to python3 executable [e.g. /usr/bin/python3]
## ffmpeg:      Absolute path to ffmpeg executable [e.g. /usr/bin/ffmpeg]
## ffprobe:     Absolute path to ffprobe executable [e.g. /usr/bin/ffprobe]
## compress_output:     Boolean flag to gzip tar files or not [options: True/False]
## dir_permissions:     Decimal permissions flag [e.g. 511] (511 = 0x777 rwrwrw)
config_version = V2023.10.03
python = /usr/bin/python3
ffmpeg = /usr/bin/ffmpeg
ffprobe = /usr/bin/ffprobe
compress_output = False
dir_permissions = 511

[segmentation]
## visual:          [False] Flag to turn on or off "WITH_VISUAL" compilation flag for segment.
## segment_processes: [1]   Number of python threads to run segmentation on. Segmentation is already multithreaded, recommended value here is 1.
## segment_processes_visual: []       Number of python threads to run visual segment on.
## signal_to_noise: [50]    Still not sure.        
## segment:                 Path to the segment executable.
## full_output:     [-f]    Flag to turn on/off generation of bounding box and corrected image tiffs. Takes ~3x longer when on. "-f" for on, "" for off.
## overlap:         [0]     Decimal between 0 and 1 to control the amount of allowable overlap between ROIs. 0 = no overlap. 1 = full overlap.
## max_area:        [400000]
## min_area:        [50]
## delta:           [4]
## fast_scratch:    [/tmp]  Location to write temporary files. Will be deleted at the end of the run. Recommend to be in memory if possible.
segment_basename = reg
visual = False
segment_processes = 1
signal_to_noise = 15
segment = ../UAF-Segmentation/segment
full_output = -f
overlap = 0.1
max_area = 400000
min_area = 200
delta = 4
fast_scratch = /tmp


[classification]
## basename:                Name string used to identify the SCNN weights (what model). Should be identical to basename in <scnn_dir>/weights/<basename>
## scnn_dir:
## scnn_cmd:
## scnn_instances:  [1]     Number of processes to apply per GPU core (should be 1)
## epoch:           []      Training epoch to use for the classification.
## fast_scratch:    [/tmp]  Location to write temporary files. Will be deleted at the end of the run. Recommend to be in memory if possible.
scnn_basename = test
scnn_dir = ../../training/20231002
scnn_cmd = ../UAF-SCNN/scnn
scnn_instances = 1
epoch = 78
fast_scratch = /tmp
batchsize = 200


[training]
## scnn_cmd:            [/opt/UAF-SCNN/scnn]    Path to the SCNN executable (could also be called wp2)
## model_dir:           []                      Path to folder containing the training images.
## basename:            []                      Name that is used to identify the specific SCNN model. Should be changed for each model version.
## start:               [0]                     Starting epoch to train from. If 0, then starts training a model from scratch. If none zero then basename must match epoch file name.
## stop:                []                      Final epoch to train towards.
## initialLearningRate: [0.002]                 Initial learning rate for model at epoch 0. Training rate for each epoch = <initial> * exp(-<epoch> * <learning rate decay>)
## learningRateDecay:   [0.01]                  The relative rate at which the learning rate declines per epoch: 0.01 = 1% decline per epoch. 
## validationSetRatio:  [0]                     The ratio of total images to use for the validatation testing (e.g. 0.2 = 20%).
## fast_scratch:        [/tmp]                  Fastest scratch directory to use (i.e. /tmp ramdisk)
## batchsize:           [300]                   The number of images to load into GPU memory at a time. Adjust based on images and GPU memory. Only marginally impacts overall performance unless very far off.
scnn_cmd = ../UAF-SCNN/scnn
model_dir = ../training/traing_set_20231002
scnn_basename = kelly-2023-10-03a
start = 0
stop = 2
initialLearningRate = 0.005
learningRateDecay = 0.01
validationSetRatio = 0
batchsize = 300


[logging]
## config (default logging.ini): Path/file controlling the logging setttings.
config = logging.ini


[R]
## preprocess: [True]   True or False flag to enable preprocessing of the plankline output.
## p_threshold:     The lower limit allowable for binning objects into their classified groups.
## dt:      [1]     The temporal binning in seconds to perform on the binned data.
## script:          The directory to the script used for preprocessing.
preprocess = False
p_threshold = 0.5
dt = 1
script = ../UAF-Workflows/preprocessing.R